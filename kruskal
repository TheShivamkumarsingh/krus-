# Kruskal's Algorithm (Iterative Method)

class Graph:# Class to represent a graph using Kruskal's algorithm
    def __init__(self, vertices):# Initialize the graph with a number of vertices
        self.vertices = vertices# Number of vertices in the graph
        self.edges = []# List to store edges in the graph

    def add_edge(self, u, v, weight):# Add an edge to the graph
        self.edges.append((weight, u, v))# Tuple of (weight, vertex1, vertex2)

    def find(self, parent, i):# Function to find the parent of a node
        # Path compression optimization
        if parent[i] == i:# If the node is its own parent
            return i# Return the node itself
        return self.find(parent, parent[i])# Recursive call to find the parent

    def union(self, parent, rank, x, y):# Function to perform union of two subsets
        # Find roots of the sets
        xroot = self.find(parent, x)# Find the root of x
        yroot = self.find(parent, y)# Find the root of y
        # Union by rank

        if rank[xroot] < rank[yroot]:# If rank of x is less than rank of y
            parent[xroot] = yroot# Make y the parent of x
        elif rank[xroot] > rank[yroot]:# If rank of x is greater than rank of y
            parent[yroot] = xroot# Make x the parent of y
        # If ranks are the same, make one root the parent of the other and increment its rank
        else:# If ranks are the same
            parent[yroot] = xroot# Make x the parent of y
            rank[xroot] += 1# Increment the rank of x

    def kruskal(self):# Function to implement Kruskal's algorithm   
        # Sort edges by weight
        self.edges.sort()# Sort edges in non-decreasing order of their weight
        # Initialize parent and rank arrays
        parent = []# List to store parent of each node
        rank = []# List to store rank of each node
        # Initialize MST
        mst = []# List to store edges in the Minimum Spanning Tree (MST)        

        # Initialize parent and rank
        for node in range(self.vertices):# For each node in the graph
            parent.append(node)# Set parent of each node to itself
            rank.append(0)# Initialize rank to 0

        # Iterate through sorted edges
        for weight, u, v in self.edges:# For each edge (weight, vertex1, vertex2)
            # Find roots of the sets
            uroot = self.find(parent, u)# Find the root of u  
            vroot = self.find(parent, v)## Find the root of v
            # If u and v are in the same set, skip this edge

            # If including this edge doesn't form a cycle
            if uroot != vroot:# If u and v are not in the same set
                # Include this edge in the MST
                mst.append((u, v, weight))## Add the edge to the MST
                # Update the parent and rank arrays
                self.union(parent, rank, uroot, vroot)## Perform union of the sets
        # Return the edges in the MST

        return mst# Return the list of edges in the MST


# Example usage
if __name__ == "__main__":# Example usage of the Kruskal's algorithm function
    # Create a graph with 4 vertices
    g = Graph(4)# Initialize the graph with 4 vertices
    # Add edges with weights and so on
    g.add_edge(0, 1, 10)
    g.add_edge(0, 2, 6)
    g.add_edge(0, 3, 5)
    g.add_edge(1, 3, 15)
    g.add_edge(2, 3, 4)

    mst = g.kruskal()# # Get the edges in the Minimum Spanning Tree (MST)
    # Print the edges in the MST and their weights
    print("Edges in the Minimum Spanning Tree:")# # Print the edges in the MST
    for u, v, weight in mst:# For each edge in the MST
        # Print the edge and its weight
        print(f"{u} -- {v} == {weight}")# # Print the edge and its weight
    # Output the total weight of the MST